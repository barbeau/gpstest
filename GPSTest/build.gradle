apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'org.jetbrains.kotlin.plugin.compose'

android {
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 34
        multiDexEnabled = true
        // versionCode scheme - first two digits are minSdkVersion, last three digits are build number
        versionCode 24099
        versionName "3.10.5"

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        // Enables Jetpack Compose for this module
        compose = true
    }

    flavorDimensions "map"

    productFlavors {
        google {
            // Google Play release using Google Play Services for maps
            dimension "map"
            applicationId "com.android.gpstest"
        }

        osmdroid {
            // F-Droid release using osmdroid for maps
            dimension "map"
            applicationId "com.android.gpstest.osmdroid"
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE', 'META-INF/NOTICE', 'META-INF/AL2.0', 'META-INF/LGPL2.1', 'META-INF/licenses/ASM']
            pickFirsts += ['win32-x86-64/attach_hotspot_windows.dll', 'win32-x86/attach_hotspot_windows.dll']
        }
    }


    if (project.hasProperty("secure.properties")
            && new File(project.property("secure.properties")).exists()) {

        Properties props = new Properties()
        props.load(new FileInputStream(file(project.property("secure.properties"))))

        signingConfigs {
            debug {
                storeFile file("gpstest.debug.keystore")
            }

            release {
                storeFile file(props['key.store'])
                keyAlias props['key.alias']
                storePassword props['key.storepassword']
                keyPassword props['key.keypassword']
            }
        }
    } else {
        signingConfigs {
            debug {
                storeFile file("gpstest.debug.keystore")
            }

            release {
                // Nothing here
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            signingConfig = signingConfigs.release
        }
        // Append the version name to the end of aligned APKs
        android.applicationVariants.all { variant ->
            if (variant.buildType.name == "release") {
                variant.outputs.all { output ->
                    outputFileName = "${variant.name}-v${variant.versionName}.apk"
                }
            }
        }
    }
    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = '1.4.0'
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    buildFeatures {
        buildConfig = true
    }

    // Gradle automatically adds 'android.test.runner' as a dependency.
    useLibrary 'android.test.runner'

    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
    namespace = 'com.android.gpstest'
    lint {
        disable 'MissingTranslation', 'ExtraTranslation', 'StringFormatInvalid'
        sarifReport = true
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation 'androidx.fragment:fragment-ktx:1.5.6'

    // Sliding drawer in map view
    implementation 'com.sothree.slidinguppanel:library:3.4.0'

    // Graphs for sliding drawer
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0-alpha'

    // QR Code reader for ground truth locations
    implementation 'com.google.zxing:android-integration:3.3.0'

    // Uploading device properties on user request
    implementation 'androidx.core:core-ktx:1.10.0-rc01'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'
    implementation 'commons-io:commons-io:2.14.0'

    // Share dialog
    implementation 'androidx.viewpager2:viewpager2:1.0.0'

    // Write GNSS antenna info to JSON
    implementation 'com.fasterxml.jackson.core:jackson-core:2.14.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'

    // Multidex - Needed for APIs < 21
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation project(path: ':library')

    // To observe flows via co-routines within the Service
    def lifecycle_version = "2.4.0-rc01"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"

    // To use trySend() instead of offer() in callbackFlow (see https://github.com/Kotlin/kotlinx.coroutines/issues/974)
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1'

    // Hilt for dependency injection
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    // Map (Google flavor only)
    googleImplementation 'com.google.android.gms:play-services-maps:17.0.1'
    // Calculating offset for camera target in map view (Google flavor only)
    googleImplementation 'com.google.maps.android:android-maps-utils:2.2.6'
    // Use suspend coroutines instead of callbacks (Google flavor only)
    googleImplementation 'com.google.maps.android:maps-ktx:3.1.0'
    // OSM Droid (fdroid flavor only)
    osmdroidImplementation 'org.osmdroid:osmdroid-android:6.1.11'

    //
    // Jetpack Compose for UI
    //

    // Integration with activities
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation "androidx.compose.compiler:compiler:1.1.0-rc02"
    // Compose Material Design
    implementation 'androidx.compose.material:material:1.0.5'
    // Bridging XML themes to Compose
    implementation "com.google.android.material:compose-theme-adapter:1.1.0"
    // Animations
    implementation 'androidx.compose.animation:animation:1.1.0-beta02'
    // Tooling support (Previews, etc.)
    implementation 'androidx.compose.ui:ui-tooling:1.0.5'
    // Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1'
    //Integration with LiveData
    implementation 'androidx.compose.runtime:runtime-livedata:1.1.0-beta02'
    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.0.5'

    //
    // Unit tests
    //
    testImplementation 'junit:junit:4.13.2'
    // Core library
    androidTestImplementation 'androidx.test:core:1.4.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'

    // Assertions
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
}